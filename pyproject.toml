[project]
name = "music-agent"
version = "0.1.0"
description = "AI-powered music agent for multi-platform music discovery and management"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Music Agent Team", email = "team@example.com"},
]
keywords = ["music", "ai", "agent", "strands", "deezer", "spotify", "youtube"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core agent framework
    "strands-agents==1.6.0",
    "strands-agents-tools==0.2.5",
    "openai>=1.0.0",  # Added for OpenAI API
    
    # Graphiti and Neo4j
    "graphiti-core>=0.3.0",
    "neo4j>=5.0.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    
    # AWS integration
    "boto3>=1.40.20",
    "botocore>=1.40.20",
    
    # Web and HTTP
    "requests>=2.32.5",
    "httpx>=0.28.1",
    "aiohttp>=3.12.15",
    "beautifulsoup4>=4.13.5",
    "lxml>=6.0.1",
    
    # Data handling and validation
    "pydantic>=2.11.7",
    "python-dotenv>=1.1.1",
    
    # Music and audio processing
    "yt-dlp>=2025.8.27",
    "mutagen>=1.47.0",
    "pycryptodomex>=3.23.0",
    "browser-cookie3>=0.20.1",
    "slskd-api>=0.1.0",  # Soulseek/slskd API client
    
    # Database
    "sqlalchemy>=2.0.43",
    "aiosqlite>=0.21.0",
    "alembic>=1.16.5",
    
    # Authentication and security
    "pyotp>=2.9.0",
    
    # CLI and user interface
    "rich>=14.1.0",
    "click>=8.2.1",
    
    # Utilities
    "pathlib",
    "typing-extensions>=4.15.0",
]

[project.optional-dependencies]
rekordbox = [
    "sqlcipher3>=0.5.0",  # For Rekordbox DB decryption - requires sqlcipher lib
]
dev = [
    # Testing
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-mock>=3.14.1",
    "pytest-cov>=6.2.1",
    
    # Code quality
    "black>=25.1.0",
    "ruff>=0.12.11",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    
    # Development tools
    "ipython>=9.4.0",
    "jupyter>=1.1.1",
    "notebook>=7.4.5",
    
    # Documentation
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.18",
]

all = [
    # Include all optional dependencies
    "music-agent[dev]",
]

[project.scripts]
# Main CLI
deez = "music_agent.cli.interface:run_cli"
music-agent = "music_agent.cli.interface:run_cli"

# Authentication
auth-deezer = "music_agent.auth.deezer_auth:run_deezer_auth"
auth-spotify = "music_agent.auth.spotify_auth:run_spotify_auth"
auth-youtube = "music_agent.auth.youtube_auth:run_youtube_auth"

# Database management
init-db = "scripts.init_databases:main"
neo4j-status = "scripts.database_tools:check_neo4j"
postgres-status = "scripts.database_tools:check_postgres"
rekordbox-sync = "scripts.sync_rekordbox:main"

# Integrations
test-soulseek = "scripts.test_soulseek:main"

# Docker services
up = "scripts.docker_tools:start_services"
down = "scripts.docker_tools:stop_services"
logs = "scripts.docker_tools:show_logs"
status = "scripts.docker_tools:check_status"

# Development tools
test = "pytest:main"
lint = "scripts.dev_tools:run_lint"
format = "scripts.dev_tools:run_format"
clean = "scripts.dev_tools:clean_project"

[project.urls]
Homepage = "https://github.com/example/music-agent"
Repository = "https://github.com/example/music-agent"
Issues = "https://github.com/example/music-agent/issues"
Documentation = "https://music-agent.readthedocs.io/"

[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.ruff]
line-length = 100
select = ["E", "F", "I", "N", "W"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_optional = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--verbose --cov=src/music_agent --cov-report=html --cov-report=term-missing"

[tool.coverage.run]
source = ["src/music_agent"]
omit = [
    "tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

# ====================================
# UV Tool Configuration
# ====================================

[tool.uv]
dev-dependencies = [
    "music-agent[dev]",
]

# UV script aliases for common commands
# Note: UV doesn't support aliases in this way. Use project.scripts instead.